"""
This type stub file was generated by pyright.
"""

from typing import Dict, Literal, Optional, Union, overload
from e2b import AsyncSandbox as BaseAsyncSandbox
from e2b_code_interpreter.models import Context, Execution, ExecutionError, OutputHandler, OutputMessage, Result

logger = ...
class AsyncSandbox(BaseAsyncSandbox):
    """
    E2B cloud sandbox is a secure and isolated cloud environment.

    The sandbox allows you to:
    - Access Linux OS
    - Create, list, and delete files and directories
    - Run commands
    - Run isolated code
    - Access the internet

    Check docs [here](https://e2b.dev/docs).

    Use the `AsyncSandbox.create()` to create a new sandbox.

    Example:
    ```python
    from e2b_code_interpreter import AsyncSandbox
    sandbox = await AsyncSandbox.create()
    ```
    """
    default_template = ...
    @overload
    async def run_code(self, code: str, language: Union[Literal["python"], None] = ..., on_stdout: Optional[OutputHandler[OutputMessage]] = ..., on_stderr: Optional[OutputHandler[OutputMessage]] = ..., on_result: Optional[OutputHandler[Result]] = ..., on_error: Optional[OutputHandler[ExecutionError]] = ..., envs: Optional[Dict[str, str]] = ..., timeout: Optional[float] = ..., request_timeout: Optional[float] = ...) -> Execution:
        """
        Runs the code as Python.

        Specify the `language` or `context` option to run the code as a different language or in a different `Context`.

        You can reference previously defined variables, imports, and functions in the code.

        :param code: Code to execute
        :param language: Language to use for code execution. If not defined, the default Python context is used.
        :param on_stdout: Callback for stdout messages
        :param on_stderr: Callback for stderr messages
        :param on_result: Callback for the `Result` object
        :param on_error: Callback for the `ExecutionError` object
        :param envs: Custom environment variables
        :param timeout: Timeout for the code execution in **seconds**
        :param request_timeout: Timeout for the request in **seconds**

        :return: `Execution` result object
        """
        ...
    
    @overload
    async def run_code(self, code: str, language: Optional[str] = ..., on_stdout: Optional[OutputHandler[OutputMessage]] = ..., on_stderr: Optional[OutputHandler[OutputMessage]] = ..., on_result: Optional[OutputHandler[Result]] = ..., on_error: Optional[OutputHandler[ExecutionError]] = ..., envs: Optional[Dict[str, str]] = ..., timeout: Optional[float] = ..., request_timeout: Optional[float] = ...) -> Execution:
        """
        Runs the code for the specified language.

        Specify the `language` or `context` option to run the code as a different language or in a different `Context`.
        If no language is specified, Python is used.

        You can reference previously defined variables, imports, and functions in the code.

        :param code: Code to execute
        :param language: Language to use for code execution. If not defined, the default Python context is used.
        :param on_stdout: Callback for stdout messages
        :param on_stderr: Callback for stderr messages
        :param on_result: Callback for the `Result` object
        :param on_error: Callback for the `ExecutionError` object
        :param envs: Custom environment variables
        :param timeout: Timeout for the code execution in **seconds**
        :param request_timeout: Timeout for the request in **seconds**

        :return: `Execution` result object
        """
        ...
    
    @overload
    async def run_code(self, code: str, context: Optional[Context] = ..., on_stdout: Optional[OutputHandler[OutputMessage]] = ..., on_stderr: Optional[OutputHandler[OutputMessage]] = ..., on_result: Optional[OutputHandler[Result]] = ..., on_error: Optional[OutputHandler[ExecutionError]] = ..., envs: Optional[Dict[str, str]] = ..., timeout: Optional[float] = ..., request_timeout: Optional[float] = ...) -> Execution:
        """
        Runs the code in the specified context, if not specified, the default context is used.

        Specify the `language` or `context` option to run the code as a different language or in a different `Context`.

        You can reference previously defined variables, imports, and functions in the code.

        :param code: Code to execute
        :param context: Concrete context to run the code in. If not specified, the default context for the language is used. It's mutually exclusive with the language.
        :param on_stdout: Callback for stdout messages
        :param on_stderr: Callback for stderr messages
        :param on_result: Callback for the `Result` object
        :param on_error: Callback for the `ExecutionError` object
        :param envs: Custom environment variables
        :param timeout: Timeout for the code execution in **seconds**
        :param request_timeout: Timeout for the request in **seconds**

        :return: `Execution` result object
        """
        ...
    
    async def run_code(self, code: str, language: Optional[str] = ..., context: Optional[Context] = ..., on_stdout: Optional[OutputHandler[OutputMessage]] = ..., on_stderr: Optional[OutputHandler[OutputMessage]] = ..., on_result: Optional[OutputHandler[Result]] = ..., on_error: Optional[OutputHandler[ExecutionError]] = ..., envs: Optional[Dict[str, str]] = ..., timeout: Optional[float] = ..., request_timeout: Optional[float] = ...) -> Execution:
        ...
    
    async def create_code_context(self, cwd: Optional[str] = ..., language: Optional[str] = ..., request_timeout: Optional[float] = ...) -> Context:
        """
        Creates a new context to run code in.

        :param cwd: Set the current working directory for the context, defaults to `/home/user`
        :param language: Language of the context. If not specified, defaults to Python
        :param request_timeout: Timeout for the request in **milliseconds**

        :return: Context object
        """
        ...
    


