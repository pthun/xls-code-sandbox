"""
This type stub file was generated by pyright.
"""

from typing import Dict, Literal, Optional, TypedDict
from httpx._types import ProxyTypes
from typing_extensions import Unpack

REQUEST_TIMEOUT: float = ...
KEEPALIVE_PING_INTERVAL_SEC = ...
KEEPALIVE_PING_HEADER = ...
class ApiParams(TypedDict, total=False):
    """
    Parameters for a request.

    In the case of a sandbox, it applies to all **requests made to the returned sandbox**.
    """
    request_timeout: Optional[float]
    headers: Optional[Dict[str, str]]
    api_key: Optional[str]
    domain: Optional[str]
    debug: Optional[bool]
    proxy: Optional[ProxyTypes]
    ...


class ConnectionConfig:
    """
    Configuration for the connection to the API.
    """
    def __init__(self, domain: Optional[str] = ..., debug: Optional[bool] = ..., api_key: Optional[str] = ..., access_token: Optional[str] = ..., request_timeout: Optional[float] = ..., headers: Optional[Dict[str, str]] = ..., extra_sandbox_headers: Optional[Dict[str, str]] = ..., proxy: Optional[ProxyTypes] = ...) -> None:
        ...
    
    def get_request_timeout(self, request_timeout: Optional[float] = ...): # -> float | None:
        ...
    
    def get_api_params(self, **opts: Unpack[ApiParams]) -> dict:
        """
        Get the parameters for the API call.

        This is used to avoid passing the following attributes to the API call:
        - access_token
        - api_url

        It also returns a copy, so the original object is not modified.

        :return: Dictionary of parameters for the API call
        """
        ...
    
    @property
    def sandbox_headers(self): # -> dict[str, str]:
        """
        # We need this separate as we use the same header for E2B access token to API and envd access token to sandbox.
        """
        ...
    


Username = Literal["root", "user"]
default_username: Username = ...
