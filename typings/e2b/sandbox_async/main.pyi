"""
This type stub file was generated by pyright.
"""

import datetime
import httpx
from typing import Dict, List, Optional, overload
from typing_extensions import Self, Unpack
from e2b.connection_config import ApiParams
from e2b.sandbox.main import SandboxOpts
from e2b.sandbox.sandbox_api import SandboxMetrics
from e2b.sandbox.utils import class_method_variant
from e2b.sandbox_async.filesystem.filesystem import Filesystem
from e2b.sandbox_async.commands.command import Commands
from e2b.sandbox_async.commands.pty import Pty
from e2b.sandbox_async.sandbox_api import SandboxApi, SandboxInfo

logger = ...
class AsyncTransportWithLogger(httpx.AsyncHTTPTransport):
    async def handle_async_request(self, request): # -> Response:
        ...
    
    @property
    def pool(self): # -> AsyncConnectionPool | AsyncHTTPProxy | AsyncSOCKSProxy:
        ...
    


class AsyncSandbox(SandboxApi):
    """
    E2B cloud sandbox is a secure and isolated cloud environment.

    The sandbox allows you to:
    - Access Linux OS
    - Create, list, and delete files and directories
    - Run commands
    - Run isolated code
    - Access the internet

    Check docs [here](https://e2b.dev/docs).

    Use the `AsyncSandbox.create()` to create a new sandbox.

    Example:
    ```python
    from e2b import AsyncSandbox

    sandbox = await AsyncSandbox.create()
    ```
    """
    @property
    def files(self) -> Filesystem:
        """
        Module for interacting with the sandbox filesystem.
        """
        ...
    
    @property
    def commands(self) -> Commands:
        """
        Module for running commands in the sandbox.
        """
        ...
    
    @property
    def pty(self) -> Pty:
        """
        Module for interacting with the sandbox pseudo-terminal.
        """
        ...
    
    def __init__(self, **opts: Unpack[SandboxOpts]) -> None:
        """
        Use `AsyncSandbox.create()` to create a new sandbox instead.
        """
        ...
    
    async def is_running(self, request_timeout: Optional[float] = ...) -> bool:
        """
        Check if the sandbox is running.

        :param request_timeout: Timeout for the request in **seconds**

        :return: `True` if the sandbox is running, `False` otherwise

        Example
        ```python
        sandbox = await AsyncSandbox.create()
        await sandbox.is_running() # Returns True

        await sandbox.kill()
        await sandbox.is_running() # Returns False
        ```
        """
        ...
    
    @classmethod
    async def create(cls, template: Optional[str] = ..., timeout: Optional[int] = ..., metadata: Optional[Dict[str, str]] = ..., envs: Optional[Dict[str, str]] = ..., secure: Optional[bool] = ..., allow_internet_access: bool = ..., **opts: Unpack[ApiParams]) -> Self:
        """
        Create a new sandbox.

        By default, the sandbox is created from the default `base` sandbox template.

        :param template: Sandbox template name or ID
        :param timeout: Timeout for the sandbox in **seconds**, default to 300 seconds. The maximum time a sandbox can be kept alive is 24 hours (86_400 seconds) for Pro users and 1 hour (3_600 seconds) for Hobby users.
        :param metadata: Custom metadata for the sandbox
        :param envs: Custom environment variables for the sandbox
        :param secure: Envd is secured with access token and cannot be used without it, defaults to `True`.
        :param allow_internet_access: Allow sandbox to access the internet, defaults to `True`.

        :return: A Sandbox instance for the new sandbox

        Use this method instead of using the constructor to create a new sandbox.
        """
        ...
    
    @overload
    async def connect(self, timeout: Optional[int] = ..., **opts: Unpack[ApiParams]) -> Self:
        """
        Connect to a sandbox. If the sandbox is paused, it will be automatically resumed.
        Sandbox must be either running or be paused.

        With sandbox ID you can connect to the same sandbox from different places or environments (serverless functions, etc).

        :param timeout: Timeout for the sandbox in **seconds**
        :return: A running sandbox instance

        @example
        ```python
        sandbox = await AsyncSandbox.create()
        await sandbox.beta_pause()

        # Another code block
        same_sandbox = await sandbox.connect()
        ```
        """
        ...
    
    @overload
    @classmethod
    async def connect(cls, sandbox_id: str, timeout: Optional[int] = ..., **opts: Unpack[ApiParams]) -> Self:
        """
        Connect to a sandbox. If the sandbox is paused, it will be automatically resumed.
        Sandbox must be either running or be paused.

        With sandbox ID you can connect to the same sandbox from different places or environments (serverless functions, etc).

        :param sandbox_id: Sandbox ID
        :param timeout: Timeout for the sandbox in **seconds**
        :return: A running sandbox instance

        @example
        ```python
        sandbox = await AsyncSandbox.create()
        await AsyncSandbox.beta_pause(sandbox.sandbox_id)

        # Another code block
        same_sandbox = await AsyncSandbox.connect(sandbox.sandbox_id))
        ```
        """
        ...
    
    @class_method_variant("_cls_connect")
    async def connect(self, timeout: Optional[int] = ..., **opts: Unpack[ApiParams]) -> Self:
        """
        Connect to a sandbox. If the sandbox is paused, it will be automatically resumed.
        Sandbox must be either running or be paused.

        With sandbox ID you can connect to the same sandbox from different places or environments (serverless functions, etc).

        :param timeout: Timeout for the sandbox in **seconds**
        :return: A running sandbox instance

        @example
        ```python
        sandbox = await AsyncSandbox.create()
        await sandbox.beta_pause()

        # Another code block
        same_sandbox = await sandbox.connect()
        ```
        """
        ...
    
    async def __aenter__(self): # -> Self:
        ...
    
    async def __aexit__(self, exc_type, exc_value, traceback): # -> None:
        ...
    
    @overload
    async def kill(self, **opts: Unpack[ApiParams]) -> bool:
        """
        Kill the sandbox.

        :return: `True` if the sandbox was killed, `False` if the sandbox was not found
        """
        ...
    
    @overload
    @staticmethod
    async def kill(sandbox_id: str, **opts: Unpack[ApiParams]) -> bool:
        """
        Kill the sandbox specified by sandbox ID.

        :param sandbox_id: Sandbox ID

        :return: `True` if the sandbox was killed, `False` if the sandbox was not found
        """
        ...
    
    @class_method_variant("_cls_kill")
    async def kill(self, **opts: Unpack[ApiParams]) -> bool:
        """
        Kill the sandbox specified by sandbox ID.

        :return: `True` if the sandbox was killed, `False` if the sandbox was not found
        """
        ...
    
    @overload
    async def set_timeout(self, timeout: int, **opts: Unpack[ApiParams]) -> None:
        """
        Set the timeout of the sandbox.
        After the timeout expires, the sandbox will be automatically killed.
        This method can extend or reduce the sandbox timeout set when creating the sandbox or from the last call to `.set_timeout`.

        The maximum time a sandbox can be kept alive is 24 hours (86_400 seconds) for Pro users and 1 hour (3_600 seconds) for Hobby users.

        :param timeout: Timeout for the sandbox in **seconds**
        """
        ...
    
    @overload
    @staticmethod
    async def set_timeout(sandbox_id: str, timeout: int, **opts: Unpack[ApiParams]) -> None:
        """
        Set the timeout of the specified sandbox.
        After the timeout expires, the sandbox will be automatically killed.
        This method can extend or reduce the sandbox timeout set when creating the sandbox or from the last call to `.set_timeout`.

        The maximum time a sandbox can be kept alive is 24 hours (86_400 seconds) for Pro users and 1 hour (3_600 seconds) for Hobby users.

        :param sandbox_id: Sandbox ID
        :param timeout: Timeout for the sandbox in **seconds**
        """
        ...
    
    @class_method_variant("_cls_set_timeout")
    async def set_timeout(self, timeout: int, **opts: Unpack[ApiParams]) -> None:
        """
        Set the timeout of the specified sandbox.
        After the timeout expires, the sandbox will be automatically killed.
        This method can extend or reduce the sandbox timeout set when creating the sandbox or from the last call to `.set_timeout`.

        The maximum time a sandbox can be kept alive is 24 hours (86_400 seconds) for Pro users and 1 hour (3_600 seconds) for Hobby users.

        :param timeout: Timeout for the sandbox in **seconds**
        """
        ...
    
    @overload
    async def get_info(self, **opts: Unpack[ApiParams]) -> SandboxInfo:
        """
        Get sandbox information like sandbox ID, template, metadata, started at/end at date.

        :return: Sandbox info
        """
        ...
    
    @overload
    @staticmethod
    async def get_info(sandbox_id: str, **opts: Unpack[ApiParams]) -> SandboxInfo:
        """
        Get sandbox information like sandbox ID, template, metadata, started at/end at date.
        :param sandbox_id: Sandbox ID

        :return: Sandbox info
        """
        ...
    
    @class_method_variant("_cls_get_info")
    async def get_info(self, **opts: Unpack[ApiParams]) -> SandboxInfo:
        """
        Get sandbox information like sandbox ID, template, metadata, started at/end at date.

        :return: Sandbox info
        """
        ...
    
    @overload
    async def get_metrics(self, start: Optional[datetime.datetime] = ..., end: Optional[datetime.datetime] = ..., **opts: Unpack[ApiParams]) -> List[SandboxMetrics]:
        """
        Get the metrics of the current sandbox.

        :param start: Start time for the metrics, defaults to the start of the sandbox
        :param end: End time for the metrics, defaults to the current time

        :return: List of sandbox metrics containing CPU, memory and disk usage information
        """
        ...
    
    @overload
    @staticmethod
    async def get_metrics(sandbox_id: str, start: Optional[datetime.datetime] = ..., end: Optional[datetime.datetime] = ..., **opts: Unpack[ApiParams]) -> List[SandboxMetrics]:
        """
        Get the metrics of the sandbox specified by sandbox ID.

        :param sandbox_id: Sandbox ID
        :param start: Start time for the metrics, defaults to the start of the sandbox
        :param end: End time for the metrics, defaults to the current time

        :return: List of sandbox metrics containing CPU, memory and disk usage information
        """
        ...
    
    @class_method_variant("_cls_get_metrics")
    async def get_metrics(self, start: Optional[datetime.datetime] = ..., end: Optional[datetime.datetime] = ..., **opts: Unpack[ApiParams]) -> List[SandboxMetrics]:
        """
        Get the metrics of the current sandbox.

        :param start: Start time for the metrics, defaults to the start of the sandbox
        :param end: End time for the metrics, defaults to the current time

        :return: List of sandbox metrics containing CPU, memory and disk usage information
        """
        ...
    
    @classmethod
    async def beta_create(cls, template: Optional[str] = ..., timeout: Optional[int] = ..., auto_pause: bool = ..., metadata: Optional[Dict[str, str]] = ..., envs: Optional[Dict[str, str]] = ..., secure: bool = ..., allow_internet_access: bool = ..., **opts: Unpack[ApiParams]) -> Self:
        """
        [BETA] This feature is in beta and may change in the future.

        Create a new sandbox.

        By default, the sandbox is created from the default `base` sandbox template.

        :param template: Sandbox template name or ID
        :param timeout: Timeout for the sandbox in **seconds**, default to 300 seconds. The maximum time a sandbox can be kept alive is 24 hours (86_400 seconds) for Pro users and 1 hour (3_600 seconds) for Hobby users.
        :param auto_pause: Automatically pause the sandbox after the timeout expires. Defaults to `False`.
        :param metadata: Custom metadata for the sandbox
        :param envs: Custom environment variables for the sandbox
        :param secure: Envd is secured with access token and cannot be used without it, defaults to `True`.
        :param allow_internet_access: Allow sandbox to access the internet, defaults to `True`.

        :return: A Sandbox instance for the new sandbox

        Use this method instead of using the constructor to create a new sandbox.
        """
        ...
    
    @overload
    async def beta_pause(self, **opts: Unpack[ApiParams]) -> None:
        """
        [BETA] This feature is in beta and may change in the future.

        Pause the sandbox.

        :return: Sandbox ID that can be used to resume the sandbox
        """
        ...
    
    @overload
    @staticmethod
    async def beta_pause(sandbox_id: str, **opts: Unpack[ApiParams]) -> None:
        """
        [BETA] This feature is in beta and may change in the future.

        Pause the sandbox specified by sandbox ID.

        :param sandbox_id: Sandbox ID

        :return: Sandbox ID that can be used to resume the sandbox
        """
        ...
    
    @class_method_variant("_cls_pause")
    async def beta_pause(self, **opts: Unpack[ApiParams]) -> None:
        """
        [BETA] This feature is in beta and may change in the future.

        Pause the sandbox.

        :return: Sandbox ID that can be used to resume the sandbox
        """
        ...
    


