"""
This type stub file was generated by pyright.
"""

import httpcore
from typing import Dict, Optional
from e2b.connection_config import ConnectionConfig, Username
from e2b.sandbox.commands.command_handle import PtySize
from e2b.sandbox_async.commands.command_handle import AsyncCommandHandle, OutputHandler, PtyOutput

class Pty:
    """
    Module for interacting with PTYs (pseudo-terminals) in the sandbox.
    """
    def __init__(self, envd_api_url: str, connection_config: ConnectionConfig, pool: httpcore.AsyncConnectionPool) -> None:
        ...
    
    async def kill(self, pid: int, request_timeout: Optional[float] = ...) -> bool:
        """
        Kill PTY.

        :param pid: Process ID of the PTY
        :param request_timeout: Timeout for the request in **seconds**

        :return: `true` if the PTY was killed, `false` if the PTY was not found
        """
        ...
    
    async def send_stdin(self, pid: int, data: bytes, request_timeout: Optional[float] = ...) -> None:
        """
        Send input to a PTY.

        :param pid: Process ID of the PTY
        :param data: Input data to send
        :param request_timeout: Timeout for the request in **seconds**
        """
        ...
    
    async def create(self, size: PtySize, on_data: OutputHandler[PtyOutput], user: Username = ..., cwd: Optional[str] = ..., envs: Optional[Dict[str, str]] = ..., timeout: Optional[float] = ..., request_timeout: Optional[float] = ...) -> AsyncCommandHandle:
        """
        Start a new PTY (pseudo-terminal).

        :param size: Size of the PTY
        :param on_data: Callback to handle PTY data
        :param user: User to use for the PTY
        :param cwd: Working directory for the PTY
        :param envs: Environment variables for the PTY
        :param timeout: Timeout for the PTY in **seconds**
        :param request_timeout: Timeout for the request in **seconds**

        :return: Handle to interact with the PTY
        """
        ...
    
    async def resize(self, pid: int, size: PtySize, request_timeout: Optional[float] = ...): # -> None:
        """
        Resize PTY.
        Call this when the terminal window is resized and the number of columns and rows has changed.

        :param pid: Process ID of the PTY
        :param size: New size of the PTY
        :param request_timeout: Timeout for the request in **seconds**
        """
        ...
    


