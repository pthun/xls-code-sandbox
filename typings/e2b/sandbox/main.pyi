"""
This type stub file was generated by pyright.
"""

from typing import Optional, TypedDict
from e2b.connection_config import ConnectionConfig

class SandboxOpts(TypedDict):
    sandbox_id: str
    sandbox_domain: Optional[str]
    envd_version: Optional[str]
    envd_access_token: Optional[str]
    connection_config: ConnectionConfig
    ...


class SandboxBase:
    _limits = ...
    envd_port = ...
    default_sandbox_timeout = ...
    default_template = ...
    def __init__(self, sandbox_id: str, envd_version: Optional[str], envd_access_token: Optional[str], sandbox_domain: Optional[str], connection_config: ConnectionConfig) -> None:
        ...
    
    @property
    def connection_config(self) -> ConnectionConfig:
        ...
    
    @property
    def sandbox_domain(self) -> Optional[str]:
        ...
    
    @property
    def envd_api_url(self) -> str:
        ...
    
    @property
    def sandbox_id(self) -> str:
        """
        Unique identifier of the sandbox.
        """
        ...
    
    def download_url(self, path: str, user: str = ..., use_signature_expiration: Optional[int] = ...) -> str:
        """
        Get the URL to download a file from the sandbox.

        :param path: Path to the file to download
        :param user: User to upload the file as
        :param use_signature_expiration: Expiration time for the signed URL in seconds

        :return: URL for downloading file
        """
        ...
    
    def upload_url(self, path: str, user: str = ..., use_signature_expiration: Optional[int] = ...) -> str:
        """
        Get the URL to upload a file to the sandbox.

        You have to send a POST request to this URL with the file as multipart/form-data.

        :param path: Path to the file to upload
        :param user: User to upload the file as
        :param use_signature_expiration: Expiration time for the signed URL in seconds

        :return: URL for uploading file
        """
        ...
    
    def get_host(self, port: int) -> str:
        """
        Get the host address to connect to the sandbox.
        You can then use this address to connect to the sandbox port from outside the sandbox via HTTP or WebSocket.

        :param port: Port to connect to

        :return: Host address to connect to
        """
        ...
    


