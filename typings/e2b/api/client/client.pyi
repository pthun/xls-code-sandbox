"""
This type stub file was generated by pyright.
"""

import ssl
import httpx
from typing import Any, Optional, Union
from attrs import define

@define
class Client:
    """A class for keeping track of data related to the API

    The following are accepted as keyword arguments and will be used to construct httpx Clients internally:

        ``base_url``: The base URL for the API, all requests are made to a relative path to this URL

        ``cookies``: A dictionary of cookies to be sent with every request

        ``headers``: A dictionary of headers to be sent with every request

        ``timeout``: The maximum amount of a time a request can take. API functions will raise
        httpx.TimeoutException if this is exceeded.

        ``verify_ssl``: Whether or not to verify the SSL certificate of the API server. This should be True in production,
        but can be set to False for testing purposes.

        ``follow_redirects``: Whether or not to follow redirects. Default value is False.

        ``httpx_args``: A dictionary of additional arguments to be passed to the ``httpx.Client`` and ``httpx.AsyncClient`` constructor.


    Attributes:
        raise_on_unexpected_status: Whether or not to raise an errors.UnexpectedStatus if the API returns a
            status code that was not documented in the source OpenAPI document. Can also be provided as a keyword
            argument to the constructor.
    """
    raise_on_unexpected_status: bool = ...
    _base_url: str = ...
    _cookies: dict[str, str] = ...
    _headers: dict[str, str] = ...
    _timeout: Optional[httpx.Timeout] = ...
    _verify_ssl: Union[str, bool, ssl.SSLContext] = ...
    _follow_redirects: bool = ...
    _httpx_args: dict[str, Any] = ...
    _client: Optional[httpx.Client] = ...
    _async_client: Optional[httpx.AsyncClient] = ...
    def with_headers(self, headers: dict[str, str]) -> Client:
        """Get a new client matching this one with additional headers"""
        ...
    
    def with_cookies(self, cookies: dict[str, str]) -> Client:
        """Get a new client matching this one with additional cookies"""
        ...
    
    def with_timeout(self, timeout: httpx.Timeout) -> Client:
        """Get a new client matching this one with a new timeout (in seconds)"""
        ...
    
    def set_httpx_client(self, client: httpx.Client) -> Client:
        """Manually set the underlying httpx.Client

        **NOTE**: This will override any other settings on the client, including cookies, headers, and timeout.
        """
        ...
    
    def get_httpx_client(self) -> httpx.Client:
        """Get the underlying httpx.Client, constructing a new one if not previously set"""
        ...
    
    def __enter__(self) -> Client:
        """Enter a context manager for self.client—you cannot enter twice (see httpx docs)"""
        ...
    
    def __exit__(self, *args: Any, **kwargs: Any) -> None:
        """Exit a context manager for internal httpx.Client (see httpx docs)"""
        ...
    
    def set_async_httpx_client(self, async_client: httpx.AsyncClient) -> Client:
        """Manually the underlying httpx.AsyncClient

        **NOTE**: This will override any other settings on the client, including cookies, headers, and timeout.
        """
        ...
    
    def get_async_httpx_client(self) -> httpx.AsyncClient:
        """Get the underlying httpx.AsyncClient, constructing a new one if not previously set"""
        ...
    
    async def __aenter__(self) -> Client:
        """Enter a context manager for underlying httpx.AsyncClient—you cannot enter twice (see httpx docs)"""
        ...
    
    async def __aexit__(self, *args: Any, **kwargs: Any) -> None:
        """Exit a context manager for underlying httpx.AsyncClient (see httpx docs)"""
        ...
    


@define
class AuthenticatedClient:
    """A Client which has been authenticated for use on secured endpoints

    The following are accepted as keyword arguments and will be used to construct httpx Clients internally:

        ``base_url``: The base URL for the API, all requests are made to a relative path to this URL

        ``cookies``: A dictionary of cookies to be sent with every request

        ``headers``: A dictionary of headers to be sent with every request

        ``timeout``: The maximum amount of a time a request can take. API functions will raise
        httpx.TimeoutException if this is exceeded.

        ``verify_ssl``: Whether or not to verify the SSL certificate of the API server. This should be True in production,
        but can be set to False for testing purposes.

        ``follow_redirects``: Whether or not to follow redirects. Default value is False.

        ``httpx_args``: A dictionary of additional arguments to be passed to the ``httpx.Client`` and ``httpx.AsyncClient`` constructor.


    Attributes:
        raise_on_unexpected_status: Whether or not to raise an errors.UnexpectedStatus if the API returns a
            status code that was not documented in the source OpenAPI document. Can also be provided as a keyword
            argument to the constructor.
        token: The token to use for authentication
        prefix: The prefix to use for the Authorization header
        auth_header_name: The name of the Authorization header
    """
    raise_on_unexpected_status: bool = ...
    _base_url: str = ...
    _cookies: dict[str, str] = ...
    _headers: dict[str, str] = ...
    _timeout: Optional[httpx.Timeout] = ...
    _verify_ssl: Union[str, bool, ssl.SSLContext] = ...
    _follow_redirects: bool = ...
    _httpx_args: dict[str, Any] = ...
    _client: Optional[httpx.Client] = ...
    _async_client: Optional[httpx.AsyncClient] = ...
    token: str
    prefix: str = ...
    auth_header_name: str = ...
    def with_headers(self, headers: dict[str, str]) -> AuthenticatedClient:
        """Get a new client matching this one with additional headers"""
        ...
    
    def with_cookies(self, cookies: dict[str, str]) -> AuthenticatedClient:
        """Get a new client matching this one with additional cookies"""
        ...
    
    def with_timeout(self, timeout: httpx.Timeout) -> AuthenticatedClient:
        """Get a new client matching this one with a new timeout (in seconds)"""
        ...
    
    def set_httpx_client(self, client: httpx.Client) -> AuthenticatedClient:
        """Manually set the underlying httpx.Client

        **NOTE**: This will override any other settings on the client, including cookies, headers, and timeout.
        """
        ...
    
    def get_httpx_client(self) -> httpx.Client:
        """Get the underlying httpx.Client, constructing a new one if not previously set"""
        ...
    
    def __enter__(self) -> AuthenticatedClient:
        """Enter a context manager for self.client—you cannot enter twice (see httpx docs)"""
        ...
    
    def __exit__(self, *args: Any, **kwargs: Any) -> None:
        """Exit a context manager for internal httpx.Client (see httpx docs)"""
        ...
    
    def set_async_httpx_client(self, async_client: httpx.AsyncClient) -> AuthenticatedClient:
        """Manually the underlying httpx.AsyncClient

        **NOTE**: This will override any other settings on the client, including cookies, headers, and timeout.
        """
        ...
    
    def get_async_httpx_client(self) -> httpx.AsyncClient:
        """Get the underlying httpx.AsyncClient, constructing a new one if not previously set"""
        ...
    
    async def __aenter__(self) -> AuthenticatedClient:
        """Enter a context manager for underlying httpx.AsyncClient—you cannot enter twice (see httpx docs)"""
        ...
    
    async def __aexit__(self, *args: Any, **kwargs: Any) -> None:
        """Exit a context manager for underlying httpx.AsyncClient (see httpx docs)"""
        ...
    


