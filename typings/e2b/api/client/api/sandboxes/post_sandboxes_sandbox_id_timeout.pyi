"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional, Union
from ...client import AuthenticatedClient
from ...models.error import Error
from ...models.post_sandboxes_sandbox_id_timeout_body import PostSandboxesSandboxIDTimeoutBody
from ...types import Response

def sync_detailed(sandbox_id: str, *, client: AuthenticatedClient, body: PostSandboxesSandboxIDTimeoutBody) -> Response[Union[Any, Error]]:
    """Set the timeout for the sandbox. The sandbox will expire x seconds from the time of the request.
    Calling this method multiple times overwrites the TTL, each time using the current timestamp as the
    starting point to measure the timeout duration.

    Args:
        sandbox_id (str):
        body (PostSandboxesSandboxIDTimeoutBody):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[Any, Error]]
    """
    ...

def sync(sandbox_id: str, *, client: AuthenticatedClient, body: PostSandboxesSandboxIDTimeoutBody) -> Optional[Union[Any, Error]]:
    """Set the timeout for the sandbox. The sandbox will expire x seconds from the time of the request.
    Calling this method multiple times overwrites the TTL, each time using the current timestamp as the
    starting point to measure the timeout duration.

    Args:
        sandbox_id (str):
        body (PostSandboxesSandboxIDTimeoutBody):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[Any, Error]
    """
    ...

async def asyncio_detailed(sandbox_id: str, *, client: AuthenticatedClient, body: PostSandboxesSandboxIDTimeoutBody) -> Response[Union[Any, Error]]:
    """Set the timeout for the sandbox. The sandbox will expire x seconds from the time of the request.
    Calling this method multiple times overwrites the TTL, each time using the current timestamp as the
    starting point to measure the timeout duration.

    Args:
        sandbox_id (str):
        body (PostSandboxesSandboxIDTimeoutBody):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[Any, Error]]
    """
    ...

async def asyncio(sandbox_id: str, *, client: AuthenticatedClient, body: PostSandboxesSandboxIDTimeoutBody) -> Optional[Union[Any, Error]]:
    """Set the timeout for the sandbox. The sandbox will expire x seconds from the time of the request.
    Calling this method multiple times overwrites the TTL, each time using the current timestamp as the
    starting point to measure the timeout duration.

    Args:
        sandbox_id (str):
        body (PostSandboxesSandboxIDTimeoutBody):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[Any, Error]
    """
    ...

