"""
This type stub file was generated by pyright.
"""

from collections.abc import Mapping
from typing import Any, TYPE_CHECKING, TypeVar
from attrs import define as _attrs_define
from ..models.node_status import NodeStatus
from ..models.node_metrics import NodeMetrics

if TYPE_CHECKING:
    ...
T = TypeVar("T", bound="Node")
@_attrs_define
class Node:
    """
    Attributes:
        cluster_id (str): Identifier of the cluster
        commit (str): Commit of the orchestrator
        create_fails (int): Number of sandbox create fails
        create_successes (int): Number of sandbox create successes
        id (str): Identifier of the node
        metrics (NodeMetrics): Node metrics
        node_id (str): Identifier of the nomad node
        sandbox_count (int): Number of sandboxes running on the node
        sandbox_starting_count (int): Number of starting Sandboxes
        service_instance_id (str): Service instance identifier of the node
        status (NodeStatus): Status of the node
        version (str): Version of the orchestrator
    """
    cluster_id: str
    commit: str
    create_fails: int
    create_successes: int
    id: str
    metrics: NodeMetrics
    node_id: str
    sandbox_count: int
    sandbox_starting_count: int
    service_instance_id: str
    status: NodeStatus
    version: str
    additional_properties: dict[str, Any] = ...
    def to_dict(self) -> dict[str, Any]:
        ...
    
    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        ...
    
    @property
    def additional_keys(self) -> list[str]:
        ...
    
    def __getitem__(self, key: str) -> Any:
        ...
    
    def __setitem__(self, key: str, value: Any) -> None:
        ...
    
    def __delitem__(self, key: str) -> None:
        ...
    
    def __contains__(self, key: str) -> bool:
        ...
    


