"""
This type stub file was generated by pyright.
"""

import datetime
from collections.abc import Mapping
from typing import Any, TYPE_CHECKING, TypeVar, Union
from attrs import define as _attrs_define
from ..models.team_user import TeamUser

if TYPE_CHECKING:
    ...
T = TypeVar("T", bound="Template")
@_attrs_define
class Template:
    """
    Attributes:
        aliases (list[str]): Aliases of the template
        build_count (int): Number of times the template was built
        build_id (str): Identifier of the last successful build for given template
        cpu_count (int): CPU cores for the sandbox
        created_at (datetime.datetime): Time when the template was created
        created_by (Union['TeamUser', None]):
        disk_size_mb (int): Disk size for the sandbox in MiB
        envd_version (str): Version of the envd running in the sandbox
        last_spawned_at (Union[None, datetime.datetime]): Time when the template was last used
        memory_mb (int): Memory for the sandbox in MiB
        public (bool): Whether the template is public or only accessible by the team
        spawn_count (int): Number of times the template was used
        template_id (str): Identifier of the template
        updated_at (datetime.datetime): Time when the template was last updated
    """
    aliases: list[str]
    build_count: int
    build_id: str
    cpu_count: int
    created_at: datetime.datetime
    created_by: Union[TeamUser, None]
    disk_size_mb: int
    envd_version: str
    last_spawned_at: Union[None, datetime.datetime]
    memory_mb: int
    public: bool
    spawn_count: int
    template_id: str
    updated_at: datetime.datetime
    additional_properties: dict[str, Any] = ...
    def to_dict(self) -> dict[str, Any]:
        ...
    
    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        ...
    
    @property
    def additional_keys(self) -> list[str]:
        ...
    
    def __getitem__(self, key: str) -> Any:
        ...
    
    def __setitem__(self, key: str, value: Any) -> None:
        ...
    
    def __delitem__(self, key: str) -> None:
        ...
    
    def __contains__(self, key: str) -> bool:
        ...
    


