"""
This type stub file was generated by pyright.
"""

from collections.abc import Mapping
from typing import Any, TYPE_CHECKING, TypeVar, Union
from attrs import define as _attrs_define
from ..types import Unset
from ..models.aws_registry import AWSRegistry
from ..models.gcp_registry import GCPRegistry
from ..models.general_registry import GeneralRegistry
from ..models.template_step import TemplateStep

if TYPE_CHECKING:
    ...
T = TypeVar("T", bound="TemplateBuildStartV2")
@_attrs_define
class TemplateBuildStartV2:
    """
    Attributes:
        force (Union[Unset, bool]): Whether the whole build should be forced to run regardless of the cache Default:
            False.
        from_image (Union[Unset, str]): Image to use as a base for the template build
        from_image_registry (Union['AWSRegistry', 'GCPRegistry', 'GeneralRegistry', Unset]):
        from_template (Union[Unset, str]): Template to use as a base for the template build
        ready_cmd (Union[Unset, str]): Ready check command to execute in the template after the build
        start_cmd (Union[Unset, str]): Start command to execute in the template after the build
        steps (Union[Unset, list['TemplateStep']]): List of steps to execute in the template build
    """
    force: Union[Unset, bool] = ...
    from_image: Union[Unset, str] = ...
    from_image_registry: Union[AWSRegistry, GCPRegistry, GeneralRegistry, Unset] = ...
    from_template: Union[Unset, str] = ...
    ready_cmd: Union[Unset, str] = ...
    start_cmd: Union[Unset, str] = ...
    steps: Union[Unset, list[TemplateStep]] = ...
    additional_properties: dict[str, Any] = ...
    def to_dict(self) -> dict[str, Any]:
        ...
    
    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        ...
    
    @property
    def additional_keys(self) -> list[str]:
        ...
    
    def __getitem__(self, key: str) -> Any:
        ...
    
    def __setitem__(self, key: str, value: Any) -> None:
        ...
    
    def __delitem__(self, key: str) -> None:
        ...
    
    def __contains__(self, key: str) -> bool:
        ...
    


