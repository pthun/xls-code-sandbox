"""
This type stub file was generated by pyright.
"""

from typing import Dict, List, Optional, Union
from e2b.template.types import CopyItem, RegistryConfig
from e2b.template.readycmd import ReadyCmd

class TemplateBuilder:
    def __init__(self, template: TemplateBase) -> None:
        ...
    
    def copy(self, src: Union[str, List[CopyItem]], dest: Optional[str] = ..., force_upload: Optional[bool] = ..., user: Optional[str] = ..., mode: Optional[int] = ...) -> TemplateBuilder:
        ...
    
    def remove(self, path: str, force: bool = ..., recursive: bool = ...) -> TemplateBuilder:
        ...
    
    def rename(self, src: str, dest: str, force: bool = ...) -> TemplateBuilder:
        ...
    
    def make_dir(self, paths: Union[str, List[str]], mode: Optional[int] = ...) -> TemplateBuilder:
        ...
    
    def make_symlink(self, src: str, dest: str) -> TemplateBuilder:
        ...
    
    def run_cmd(self, command: Union[str, List[str]], user: Optional[str] = ...) -> TemplateBuilder:
        ...
    
    def set_workdir(self, workdir: str) -> TemplateBuilder:
        ...
    
    def set_user(self, user: str) -> TemplateBuilder:
        ...
    
    def pip_install(self, packages: Optional[Union[str, List[str]]] = ...) -> TemplateBuilder:
        ...
    
    def npm_install(self, packages: Optional[Union[str, List[str]]] = ..., g: Optional[bool] = ...) -> TemplateBuilder:
        ...
    
    def apt_install(self, packages: Union[str, List[str]]) -> TemplateBuilder:
        ...
    
    def git_clone(self, url: str, path: Optional[str] = ..., branch: Optional[str] = ..., depth: Optional[int] = ...) -> TemplateBuilder:
        ...
    
    def set_envs(self, envs: Dict[str, str]) -> TemplateBuilder:
        ...
    
    def skip_cache(self) -> TemplateBuilder:
        ...
    
    def set_start_cmd(self, start_cmd: str, ready_cmd: Union[str, ReadyCmd]) -> TemplateFinal:
        ...
    
    def set_ready_cmd(self, ready_cmd: Union[str, ReadyCmd]) -> TemplateFinal:
        ...
    


class TemplateFinal:
    def __init__(self, template: TemplateBase) -> None:
        ...
    


class TemplateBase:
    _limits = ...
    _logs_refresh_frequency = ...
    def __init__(self, file_context_path: Optional[str] = ..., ignore_file_paths: Optional[List[str]] = ...) -> None:
        ...
    
    def skip_cache(self) -> TemplateBase:
        """Skip cache for the next instruction (before from instruction)"""
        ...
    
    def from_debian_image(self, variant: str = ...) -> TemplateBuilder:
        ...
    
    def from_ubuntu_image(self, variant: str = ...) -> TemplateBuilder:
        ...
    
    def from_python_image(self, version: str = ...) -> TemplateBuilder:
        ...
    
    def from_node_image(self, variant: str = ...) -> TemplateBuilder:
        ...
    
    def from_base_image(self) -> TemplateBuilder:
        ...
    
    def from_image(self, base_image: str, registry_config: Optional[RegistryConfig] = ...) -> TemplateBuilder:
        """Private method to set base image without adding stack trace"""
        ...
    
    def from_template(self, template: str) -> TemplateBuilder:
        ...
    
    def from_dockerfile(self, dockerfile_content_or_path: str) -> TemplateBuilder:
        """Parse a Dockerfile and convert it to Template SDK format

        Args:
            dockerfile_content_or_path: Either the Dockerfile content as a string,
                                       or a path to a Dockerfile file
        """
        ...
    
    def from_registry(self, image: str, username: str, password: str) -> TemplateBuilder:
        ...
    
    def from_aws_registry(self, image: str, access_key_id: str, secret_access_key: str, region: str) -> TemplateBuilder:
        ...
    
    def from_gcp_registry(self, image: str, service_account_json: Union[str, dict]) -> TemplateBuilder:
        ...
    
    @staticmethod
    def to_json(template: TemplateClass) -> str:
        ...
    
    @staticmethod
    def to_dockerfile(template: TemplateClass) -> str:
        ...
    


TemplateClass = Union[TemplateFinal, TemplateBuilder]
