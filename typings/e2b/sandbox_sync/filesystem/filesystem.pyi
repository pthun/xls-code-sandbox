"""
This type stub file was generated by pyright.
"""

import httpcore
import httpx
from typing import IO, Iterator, List, Literal, Optional, Union, overload
from e2b.sandbox.filesystem.filesystem import EntryInfo, WriteEntry, WriteInfo
from e2b.connection_config import ConnectionConfig, Username
from e2b.sandbox_sync.filesystem.watch_handle import WatchHandle

class Filesystem:
    """
    Module for interacting with the filesystem in the sandbox.
    """
    def __init__(self, envd_api_url: str, envd_version: Optional[str], connection_config: ConnectionConfig, pool: httpcore.ConnectionPool, envd_api: httpx.Client) -> None:
        ...
    
    @overload
    def read(self, path: str, format: Literal["text"] = ..., user: Username = ..., request_timeout: Optional[float] = ...) -> str:
        """
        Read file content as a `str`.

        :param path: Path to the file
        :param user: Run the operation as this user
        :param format: Format of the file content—`text` by default
        :param request_timeout: Timeout for the request in **seconds**

        :return: File content as a `str`
        """
        ...
    
    @overload
    def read(self, path: str, format: Literal["bytes"], user: Username = ..., request_timeout: Optional[float] = ...) -> bytearray:
        """
        Read file content as a `bytearray`.

        :param path: Path to the file
        :param user: Run the operation as this user
        :param format: Format of the file content—`bytes`
        :param request_timeout: Timeout for the request in **seconds**

        :return: File content as a `bytearray`
        """
        ...
    
    @overload
    def read(self, path: str, format: Literal["stream"], user: Username = ..., request_timeout: Optional[float] = ...) -> Iterator[bytes]:
        """
        Read file content as a `Iterator[bytes]`.

        :param path: Path to the file
        :param user: Run the operation as this user
        :param format: Format of the file content—`stream`
        :param request_timeout: Timeout for the request in **seconds**

        :return: File content as an `Iterator[bytes]`
        """
        ...
    
    def read(self, path: str, format: Literal["text", "bytes", "stream"] = ..., user: Username = ..., request_timeout: Optional[float] = ...): # -> str | bytearray | Iterator[bytes]:
        ...
    
    def write(self, path: str, data: Union[str, bytes, IO], user: Username = ..., request_timeout: Optional[float] = ...) -> WriteInfo:
        """
        Write content to a file on the path.
        Writing to a file that doesn't exist creates the file.
        Writing to a file that already exists overwrites the file.
        Writing to a file at path that doesn't exist creates the necessary directories.

        :param path: Path to the file
        :param data: Data to write to the file, can be a `str`, `bytes`, or `IO`.
        :param user: Run the operation as this user
        :param request_timeout: Timeout for the request in **seconds**

        :return: Information about the written file
        """
        ...
    
    def write_files(self, files: List[WriteEntry], user: Username = ..., request_timeout: Optional[float] = ...) -> List[WriteInfo]:
        """
        Writes a list of files to the filesystem.
        When writing to a file that doesn't exist, the file will get created.
        When writing to a file that already exists, the file will get overwritten.
        When writing to a file that's in a directory that doesn't exist, you'll get an error.

        :param files: list of files to write as `WriteEntry` objects, each containing `path` and `data`
        :param user: Run the operation as this user
        :param request_timeout: Timeout for the request
        :return: Information about the written files
        """
        ...
    
    def list(self, path: str, depth: Optional[int] = ..., user: Username = ..., request_timeout: Optional[float] = ...) -> List[EntryInfo]:
        """
        List entries in a directory.

        :param path: Path to the directory
        :param depth: Depth of the directory to list
        :param user: Run the operation as this user
        :param request_timeout: Timeout for the request in **seconds**

        :return: List of entries in the directory
        """
        ...
    
    def exists(self, path: str, user: Username = ..., request_timeout: Optional[float] = ...) -> bool:
        """
        Check if a file or a directory exists.

        :param path: Path to a file or a directory
        :param user: Run the operation as this user
        :param request_timeout: Timeout for the request in **seconds**

        :return: `True` if the file or directory exists, `False` otherwise
        """
        ...
    
    def get_info(self, path: str, user: Username = ..., request_timeout: Optional[float] = ...) -> EntryInfo:
        """
        Get information about a file or directory.

        :param path: Path to a file or a directory
        :param user: Run the operation as this user
        :param request_timeout: Timeout for the request in **seconds**

        :return: Information about the file or directory like name, type, and path
        """
        ...
    
    def remove(self, path: str, user: Username = ..., request_timeout: Optional[float] = ...) -> None:
        """
        Remove a file or a directory.

        :param path: Path to a file or a directory
        :param user: Run the operation as this user
        :param request_timeout: Timeout for the request in **seconds**
        """
        ...
    
    def rename(self, old_path: str, new_path: str, user: Username = ..., request_timeout: Optional[float] = ...) -> EntryInfo:
        """
        Rename a file or directory.

        :param old_path: Path to the file or directory to rename
        :param new_path: New path to the file or directory
        :param user: Run the operation as this user
        :param request_timeout: Timeout for the request in **seconds**

        :return: Information about the renamed file or directory
        """
        ...
    
    def make_dir(self, path: str, user: Username = ..., request_timeout: Optional[float] = ...) -> bool:
        """
        Create a new directory and all directories along the way if needed on the specified path.

        :param path: Path to a new directory. For example '/dirA/dirB' when creating 'dirB'.
        :param user: Run the operation as this user
        :param request_timeout: Timeout for the request in **seconds**

        :return: `True` if the directory was created, `False` if the directory already exists
        """
        ...
    
    def watch_dir(self, path: str, user: Username = ..., request_timeout: Optional[float] = ..., recursive: bool = ...) -> WatchHandle:
        """
        Watch directory for filesystem events.

        :param path: Path to a directory to watch
        :param user: Run the operation as this user
        :param request_timeout: Timeout for the request in **seconds**
        :param recursive: Watch directory recursively

        :return: `WatchHandle` object for stopping watching directory
        """
        ...
    


