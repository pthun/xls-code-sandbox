"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Generator, Optional, Union
from e2b.envd.process import process_pb2
from e2b.sandbox.commands.command_handle import CommandResult, PtyOutput

class CommandHandle:
    """
    Command execution handle.

    It provides methods for waiting for the command to finish, retrieving stdout/stderr, and killing the command.
    """
    @property
    def pid(self): # -> int:
        """
        Command process ID.
        """
        ...
    
    def __init__(self, pid: int, handle_kill: Callable[[], bool], events: Generator[Union[process_pb2.StartResponse, process_pb2.ConnectResponse], Any, None]) -> None:
        ...
    
    def __iter__(self): # -> Generator[Tuple[Stdout, None, None] | Tuple[None, Stderr, None] | Tuple[None, None, PtyOutput], None, None]:
        """
        Iterate over the command output.

        :return: Generator of command outputs
        """
        ...
    
    def disconnect(self) -> None:
        """
        Disconnect from the command.

        The command is not killed, but SDK stops receiving events from the command.
        You can reconnect to the command using `sandbox.commands.connect` method.
        """
        ...
    
    def wait(self, on_pty: Optional[Callable[[PtyOutput], None]] = ..., on_stdout: Optional[Callable[[str], None]] = ..., on_stderr: Optional[Callable[[str], None]] = ...) -> CommandResult:
        """
        Wait for the command to finish and returns the result.
        If the command exits with a non-zero exit code, it throws a `CommandExitException`.

        :param on_pty: Callback for pty output
        :param on_stdout: Callback for stdout output
        :param on_stderr: Callback for stderr output

        :return: `CommandResult` result of command execution
        """
        ...
    
    def kill(self) -> bool:
        """
        Kills the command.

        It uses `SIGKILL` signal to kill the command.

        :return: Whether the command was killed successfully
        """
        ...
    


